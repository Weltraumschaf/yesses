# yesses #

Simple tool to enumerate domains and IPs and test those domains and
IPs for basic network and web security properties.

yesses provides a number of modules that each perform a certain task.
For example, the module `discover Domains and IPs` queries DNS servers
for IP addresses. Each module has a number of defined inputs (in this
case, for example, domain names) and outputs (e.g., IP addresses and
domain names expanded from CNAMEs). These outputs are called "findings".

Modules can be combined by feeding the findings of one module into the
input of another module. For example, the module `discover Webservers`
can use the domain names and IP addresses from `discover Domains and
IPs` as inputs. This enables a dynamic scanning of infrastructures
without configuring every domain name, IP address, etc. manually.

After the execution of each module, alerts can be defined. Alerts can
trigger when certain elements are contained (or are not contained) in
the output of a module; alerts can also be triggered when — compared
to the previous run of yesses — new elements appear in the output of a
module. 

Alerts are processed by one or more user-defined outputs. yesses comes
with an HTML template output and Slack notification output.


# Usage #

```
{{usage}}
```

# Configuration file #

[todo]

## `expect` ##
Expects arguments of the form "no added X, otherwise action args".

# Discovery and Scanning Modules #

The following modules are currently provided by yesses. For each
module, a short description in given plus a list of input and output
fields. The field names can be used in the yaml configuration file. 

{% for module_name, modules in modules.items() %}
{% for module in modules %}
## `{{ module_name }} {{ module.__name__ }}` ##
{{ module.__doc__ }}

{% if module.EXAMPLES|default(False) %}
### Examples ###
{% for ex in module.EXAMPLES %}
#### {{ ex.name }} ####
Configuration:
```YAML
{{ ex.raw -}}
```
Findings returned:
```YAML
{{ ex.output|yaml -}}
```

{% endfor %}
{% endif %}

### Inputs ###

| Name             | Description    | Required keys                                            |
|------------------|----------------|----------------------------------------------------------|
{% for field, input in module.INPUTS.items() -%}
| `{{ field }}` {% if not 'default' in input %}(required){% endif %} | {{ input['description'] }} | {% if input['required_keys'] %}`{{ '`, `'.join(input['required_keys']) }}`{% endif %} |
{% endfor %}

{% for field, input in module.INPUTS.items() -%}
{% if 'default' in input %}
#### Default for `{{ field }}` ####
```YAML
{{ input['default']|yaml -}}
```
{% endif %}
{% endfor %}

### Outputs ###

| Name             | Description    | Provided keys                                            |
|------------------|----------------|----------------------------------------------------------|
{% for field, output in module.OUTPUTS.items() -%}
| `{{ field }}` | {{ output['description'] }} | {% if output['provided_keys'] %}`{{ '`, `'.join(output['provided_keys']) }}`{% endif %} |
{% endfor %}

{% endfor %}
{% endfor %}

# Output Modules

Output modules take the alerts created from the findings of the
discovery and scanning modules and produce some kind of output - a
file, a notification, or potentially other forms of output.

## `Template`

This module uses a jinja2 template to create output, for example, an HTML summary of the alerts.

{% with timeformatexample="yesses-report-%Y-%m-%d-%H%M%S.html" %}
Parameters:

  * `template`: defines the jinja2 template that is to be used to create the output.
  * `filename`: where the output is written to. Placeholders as in [python's `strftime()` function](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior) are evaluated. For example, `{{ timeformatexample }}` would be converted to a filename like `{{ time.strftime(timeformatexample) }}`.

Both filenames can be relative paths (evaluated relative to the
working directory) or absolute paths.
{% endwith %}

## `Slack`

Sends a slack notification to one or more recipients. The notification
contains a summary of the alerts (grouped by severity).

Parameters:

  * `channels`: List of channel identifiers to send the notification to. Can also be user identifiers (which can be retrieved from the Slack user interface) to send the notification to individual users.
  * `token`: A valid slack bot API token. The token can alternatively be provided in an environment variable `YESSES_SLACK_TOKEN`.

